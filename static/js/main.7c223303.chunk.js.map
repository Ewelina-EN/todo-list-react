{"version":3,"sources":["Form/index.js","Tasks/styled.js","Tasks/index.js","Buttons/index.js","Section/index.js","Header/index.js","Container/index.js","App.js","reportWebVitals.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","trim","placeholder","value","autoFocus","onChange","target","List","styled","ul","Item","li","hidden","css","Content","span","done","Button","button","remove","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","onClick","id","content","Buttons","toggleHideDone","setAllDone","length","disabled","every","Section","title","body","extraHeaderContent","Header","Container","children","App","setHideDone","tasksFromStorage","localStorage","getItem","JSON","parse","setTasks","useEffect","setItem","stringify","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c223303.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n   const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n   const onFormSubmit = (event) => {\r\n      event.preventDefault();\r\n\r\n      if (newTaskContent.trim() === \"\") {\r\n         return;\r\n      };\r\n\r\n      addNewTask(newTaskContent);\r\n      setNewTaskContent(\"\");\r\n   };\r\n\r\n   return (\r\n      <form className=\"form\" onSubmit={onFormSubmit}>\r\n         <input\r\n            className=\"form__newTask\"\r\n            placeholder=\"Co jest do zrobienia?\"\r\n            value={newTaskContent}\r\n            autoFocus\r\n            onChange={({ target }) => setNewTaskContent(target.value)}\r\n         />\r\n         <button className=\"form__taskButton\">Dodaj zadanie</button>\r\n      </form>\r\n   );\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    background-color: white;\r\n    padding: 10px;\r\n    margin: auto;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    border-bottom: 1px solid #ccc;\r\n    padding: 10px;\r\n    align-items: center;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        word-break: break-word;\r\n        flex-basis: 100%;\r\n        flex-wrap: wrap;\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    text-align: center;\r\n    width: 30px;\r\n    height: 30px;\r\n    margin: 0 10px;\r\n    border: none;\r\n    color: white;\r\n    font-size: 16px;\r\n    align-self: center;\r\n\r\n    ${({ done }) => done && css`\r\n        background-color: green;\r\n        cursor: pointer;\r\n        transition: 1s;\r\n        \r\n        &:hover {\r\n            background-color: hsl(120, 100%, 35%);\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: red;\r\n        cursor: pointer;\r\n        transition: 1s;\r\n\r\n        &:hover {\r\n            background-color: hsl(0, 100%, 65%);\r\n        }\r\n    `}\r\n`;","import React from \"react\";\r\nimport { List, Item, Content, Button } from \"./styled\";\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n  <List>\r\n    {tasks.map(task => (\r\n      <Item\r\n        key={task.id}\r\n        hidden={task.done && hideDone}\r\n      >\r\n        <Button\r\n          done\r\n          onClick={() => toggleTaskDone(task.id)}\r\n        >\r\n          {task.done ? \"âœ”\" : \"\"}\r\n        </Button>\r\n        <Content done={task.done}>\r\n          {task.content}\r\n        </Content>\r\n        <Button\r\n          remove\r\n          onClick={() => removeTask(task.id)}\r\n        >\r\n          ðŸ—‘\r\n        </Button>\r\n      </Item>\r\n    ))}\r\n  </List>\r\n);\r\n\r\nexport default Tasks;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\r\n\r\n  <div className=\"buttons\">\r\n    {tasks.length > 0 && (\r\n      <>\r\n        <button\r\n          onClick={toggleHideDone}\r\n          className=\"buttons__button\"\r\n        >\r\n          {hideDone ? \"PokaÅ¼\" : \"Ukryj\"} ukoÅ„czone\r\n        </button>\r\n        <button\r\n          onClick={setAllDone}\r\n          className=\"buttons__button\"\r\n          disabled={tasks.every((task => task.done))}\r\n        >\r\n          UkoÅ„cz wszystkie\r\n        </button>\r\n      </>\r\n    )}\r\n  </div>\r\n);\r\n\r\n\r\nexport default Buttons;","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <section className=\"section\">\r\n        <header className=\"section__subHeader\">\r\n            <h2 className=\"section__title\"> {title} </h2>\r\n            {extraHeaderContent}\r\n        </header>\r\n        {body}\r\n    </section>\r\n);\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\n\r\nconst Header = ({ title }) => (\r\n    <h1>{title}</h1>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Container = ({ children }) => (\r\n    <main className=\"container\">\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Container;","import React, { useEffect, useState } from 'react';\r\nimport Form from \"./Form\";\r\nimport Tasks from \"./Tasks\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"./Section\";\r\nimport Header from \"./Header\";\r\nimport Container from \"./Container\";\r\n\r\n\r\nfunction App() {\r\n\r\n  const [hideDone, setHideDone] = useState(false);\r\n\r\n  const tasksFromStorage = localStorage.getItem(\"tasks\"); \r\n\r\n  const [tasks, setTasks] = useState(\r\n    tasksFromStorage\r\n      ? JSON.parse(tasksFromStorage)\r\n      : []\r\n  );\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n  }, [tasks]);\r\n\r\n  const toggleHideDone = () => {\r\n    setHideDone(hideDone => !hideDone);\r\n  };\r\n\r\n  const removeTask = (id) => {\r\n    setTasks(tasks => tasks.filter(task => task.id !== id));\r\n  };\r\n\r\n  const toggleTaskDone = (id) => {\r\n    setTasks(tasks => tasks.map(task => {\r\n      if (task.id === id) {\r\n        return { ...task, done: !task.done };\r\n      }\r\n\r\n      return task;\r\n    }));\r\n  };\r\n\r\n  const setAllDone = () => {\r\n    setTasks(tasks => tasks.map(task => ({\r\n      ...task,\r\n      done: true,\r\n    })));\r\n  };\r\n\r\n  const addNewTask = (content) => {\r\n    setTasks(tasks => [\r\n      ...tasks,\r\n      {\r\n        content,\r\n        done: false,\r\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\r\n      },\r\n    ]);\r\n  };\r\n\r\n\r\n  return (\r\n    <Container>\r\n      <Header title=\"Lista zadaÅ„\" />\r\n      <Section\r\n        title=\"Dodaj nowe zadanie\"\r\n        body={< Form addNewTask={addNewTask} />}\r\n      />\r\n      <Section\r\n        title=\"Lista zadaÅ„\"\r\n        body={\r\n          < Tasks\r\n            tasks={tasks}\r\n            hideDone={hideDone}\r\n            removeTask={removeTask}\r\n            toggleTaskDone={toggleTaskDone} />\r\n        }\r\n        extraHeaderContent={\r\n          <Buttons\r\n            tasks={tasks}\r\n            hideDone={hideDone}\r\n            toggleHideDone={toggleHideDone}\r\n            setAllDone={setAllDone} />\r\n        }\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}