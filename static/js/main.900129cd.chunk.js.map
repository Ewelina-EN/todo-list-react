{"version":3,"sources":["reportWebVitals.js","GlobalStyle.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/TasksPage/Form/styled.js","features/tasks/Input/index.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/TaskList/styled.js","features/tasks/TasksPage/searchQueryParamName.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/TasksPage/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/index.js","features/tasks/TasksPage/DownloadButtons/DownloadButton.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/index.js","features/author/styled.js","features/tasks/TaskPage/index.js","styled.js","features/author/AuthorPage.js","App.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js","theme.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","theme","color","iron","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","setAllDone","fetchExampleTasks","loading","fetchExampleTasksSucces","fetchExampleTasksError","actions","setTasks","selectTasksState","selectTasks","selectHideDone","selectAreTasksEmpty","lehgth","selectIsEveryTaskDone","every","selectLoading","StyledForm","styled","form","white","css","breakpoint","mobileMax","Button","button","teal","input","lightGrey","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trim","content","nanoid","current","focus","Input","ref","placeholder","value","autoFocus","onChange","target","List","ul","Item","li","hidden","Content","span","green","remove","red","TaskList","location","useLocation","query","URLSearchParams","search","get","searchQueryParamName","useSelector","filter","toUpperCase","includes","selectTasksByQuery","map","onClick","to","StyledButtons","div","grey","Buttons","areTasksEmpty","isEveryTaskDone","disabled","StyledSection","section","silver","Header","header","Title","h2","Section","title","body","extraHeaderContent","StyledContainer","main","DownloadButton","Wrapper","history","useHistory","searchParams","delete","set","pathname","toString","TasksPage","Search","StyledDescription","TaskPage","useParams","find","getTaskById","StyledList","activeClassName","StyledNavLink","NavLink","attrs","path","AuthorPage","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","delay","call","exampleTasks","put","alert","select","takeLatest","type","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","breakpoints","App","document","getElementById"],"mappings":"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","file":"static/js/main.900129cd.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\nhtml {\r\n    box-sizing: border-box;\r\n  }\r\n  \r\n  *, ::after, ::before {\r\n    box-sizing: inherit;\r\n  }\r\n  \r\n  body {\r\n    font-family: 'Montserrat', sans-serif;\r\n    background-color: ${({ theme }) => theme.color.iron};\r\n  }\r\n`;","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks =>\r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () =>\r\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getTasksFromLocalStorage } from './tasksLocalStorage';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        removeTask: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks.splice(index, 1);\r\n        },\r\n        setAllDone: ({ tasks }) => {\r\n            for (const task of tasks) {\r\n                task.done = true;\r\n            }\r\n        },\r\n        fetchExampleTasks: state => {\r\n            state.loading = true;\r\n        },\r\n        fetchExampleTasksSucces: (state, {payload: tasks}) => {\r\n            state.tasks = tasks;\r\n            state.loading = false;\r\n        },\r\n        fetchExampleTasksError: (state) => {\r\n            state.loading = false;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    addTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    setAllDone,\r\n    fetchExampleTasks,\r\n    setTasks,\r\n    fetchExampleTasksSucces,\r\n    fetchExampleTasksError,\r\n} = tasksSlice.actions;\r\n\r\nconst selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectAreTasksEmpty = state => selectTasks(state).lehgth === 0;\r\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({ done }) => done);\r\nexport const selectLoading = state =>  selectTasksState(state).loading;\r\n\r\nexport const getTaskById = (state, taskId) =>\r\n    selectTasks(state).find(({ id }) => id === taskId);\r\n\r\nexport const selectTasksByQuery = (state, query) => {\r\n    const tasks = selectTasks(state);\r\n    if (!query || query.trim() === \"\") {\r\n        return tasks;\r\n    }\r\n    return tasks.filter(({ content }) =>\r\n        content.toUpperCase().includes(query.trim().toUpperCase()));\r\n}\r\nexport default tasksSlice.reducer;","import styled, { css } from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: flex;\r\n    background-color: ${({ theme }) => theme.color.white};\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 10px;\r\n\r\n    ${({ StyledForm }) => StyledForm && css`\r\n        @media(max-width:${({ theme }) => theme.breakpoint.mobileMax};) \r\n        {\r\n            grid-template-columns: 1fr;\r\n        }`\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    flex-grow: 1;\r\n    background-color: ${({ theme }) => theme.color.teal};\r\n    color: ${({ theme }) => theme.color.white};\r\n    padding: 10px;\r\n    margin: 10px;\r\n    border: none;\r\n    transition: 1s;\r\n    cursor: pointer;\r\n        &:hover{\r\n            background-color: hsl(180, 100%, 30%);\r\n            transform: scale(1.1);\r\n            transition: 1s;\r\n        }\r\n        &:active{\r\n            background-color: hsl(180, 100%, 35%);\r\n        }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport default styled.input`\r\n    flex-basis: 75%;\r\n    flex-grow: 1;\r\n    margin: 10px;\r\n    padding: 10px;\r\n    border: 1px solid ${({ theme }) => theme.color.lightGrey};\r\n`;","import React, { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { addTask } from \"../../tasksSlice\";\r\nimport { StyledForm, Button } from \"./styled\";\r\nimport Input from \"../../Input\";\r\n\r\nconst Form = () => {\r\n   const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n   const inputRef = useRef(null);\r\n\r\n   const dispatch = useDispatch();\r\n\r\n   const onFormSubmit = (event) => {\r\n      event.preventDefault();\r\n\r\n      if (newTaskContent.trim() === \"\") {\r\n         return;\r\n      };\r\n      const task = {\r\n         content: newTaskContent,\r\n         done: false,\r\n         id: nanoid(),\r\n      };\r\n      dispatch(addTask(task));\r\n\r\n      setNewTaskContent(\"\");\r\n      inputRef.current.focus();\r\n   };\r\n\r\n   return (\r\n      <StyledForm\r\n         onSubmit={onFormSubmit}>\r\n         <Input\r\n            ref={inputRef}\r\n            placeholder=\"Co jest do zrobienia?\"\r\n            value={newTaskContent}\r\n            autoFocus\r\n            onChange={({ target }) => setNewTaskContent(target.value)}\r\n         />\r\n         <Button >Dodaj zadanie</Button>\r\n      </StyledForm>\r\n   );\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    background-color: ${({ theme }) => theme.color.white};\r\n    padding: 10px;\r\n    margin: auto;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.lightGrey};\r\n    padding: 10px;\r\n    align-items: center;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        word-break: break-word;\r\n        flex-basis: 100%;\r\n        flex-wrap: wrap;\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    ${({ done }) => done && css`\r\n    text-decoration: line-through;\r\n    `}\r\n    & a {\r\n        text-decoration: none;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    text-align: center;\r\n    width: 30px;\r\n    height: 30px;\r\n    margin: 0 10px;\r\n    border: none;\r\n    color: ${({ theme }) => theme.color.white};\r\n    font-size: 16px;\r\n    align-self: center;\r\n\r\n    ${({ done }) => done && css`\r\n        background-color: ${({ theme }) => theme.color.green};\r\n        cursor: pointer;\r\n        transition: 1s;\r\n        \r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.color.red};\r\n        cursor: pointer;\r\n        transition: 1s;\r\n\r\n        &:hover {\r\n            filter: brightness(120%);\r\n        }\r\n    `}\r\n`;","export default \"szukaj\";","import React from \"react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { toggleTaskDone, removeTask, selectHideDone, selectTasksByQuery } from \"../../tasksSlice\";\r\nimport { List, Item, Button, Content } from \"./styled\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\n\r\nconst TaskList = () => {\r\n  const location = useLocation();\r\n  const query = (new URLSearchParams(location.search)).get(searchQueryParamName);\r\n\r\n  const tasks = useSelector(state => selectTasksByQuery(state, query));\r\n  const hideDone = useSelector(selectHideDone);\r\n\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <List>\r\n      {tasks.map(task => (\r\n        <Item\r\n          key={task.id}\r\n          hidden={task.done && hideDone}\r\n        >\r\n          <Button\r\n            done\r\n            onClick={() => dispatch(toggleTaskDone(task.id))}\r\n          >\r\n            {task.done ? \"✔\" : \"\"}\r\n          </Button>\r\n          <Content done={task.done}>\r\n            <Link to={`/zadania/${task.id}`}>{task.content}</Link>\r\n          </Content>\r\n          <Button\r\n            remove\r\n            onClick={() => dispatch(removeTask(task.id))}\r\n          >\r\n            🗑\r\n          </Button>\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const StyledButtons = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    background-color: transparent;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background-color: transparent;\r\n    color: ${({ theme }) => theme.color.teal};\r\n    margin: 5px;\r\n    border: none;\r\n    font-size: 15px;\r\n    transition: 1s;\r\n    cursor: pointer;\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n        &:active {\r\n            filter: brightness(120%);\r\n        }\r\n        &:disabled {\r\n            color: ${({ theme }) => theme.color.grey};\r\n            cursor: default;\r\n        } \r\n`;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport { StyledButtons, Button } from \"./styled\";\r\nimport {\r\n  toggleHideDone,\r\n  setAllDone,\r\n  selectAreTasksEmpty,\r\n  selectHideDone,\r\n  selectIsEveryTaskDone,\r\n} from \"../../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n  const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n  const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n  const hideDone = useSelector(selectHideDone);\r\n\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <StyledButtons>\r\n      {!areTasksEmpty && (\r\n        <>\r\n          <Button\r\n            onClick={() => dispatch(toggleHideDone())}\r\n          >\r\n            {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n          </Button>\r\n          <Button\r\n            onClick={() => dispatch(setAllDone())}\r\n            disabled={isEveryTaskDone}\r\n          >\r\n            Ukończ wszystkie\r\n          </Button>\r\n        </>\r\n      )}\r\n    </StyledButtons>\r\n  );\r\n};\r\nexport default Buttons;","import styled, { css } from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    margin: 10px 0;\r\n    background: ${({ theme }) => theme.color.white};\r\n    box-shadow: 0 0 5px  ${({ theme }) => theme.color.silver};\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.silver};\r\n    padding: 0 20px;\r\n    flex-wrap: wrap;\r\n\r\n    ${({ Header }) => Header && css`\r\n        @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}) {\r\n        flex-direction: column;\r\n  }`}\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    font-size: 20px;\r\n`;\r\n\r\n","import React from \"react\";\r\nimport { StyledSection, Header, Title } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <StyledSection>\r\n        <Header>\r\n            <Title> {title} </Title>\r\n            {extraHeaderContent}\r\n        </Header>\r\n        {body}\r\n    </StyledSection>\r\n);\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\n\r\nconst Header = ({ title }) => (\r\n    <h1>{title}</h1>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nconst StyledContainer = styled.main`\r\n    max-width: 800px;\r\n    margin: 20px auto;\r\n    padding: 20px;\r\n`;\r\n\r\nexport default StyledContainer;","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { StyledButtons, Button } from \"../Buttons/styled\";\r\nimport { fetchExampleTasks, selectLoading } from \"../../tasksSlice\";\r\n\r\nconst DownloadButton = () => {\r\n    const dispatch = useDispatch();\r\n    const loading = useSelector(selectLoading);\r\n    return (\r\n        <StyledButtons>\r\n                <Button\r\n                    disabled={loading}\r\n                    onClick={() => dispatch(fetchExampleTasks())}>\r\n                {\r\n                    loading\r\n                    ? \"Ładowanie...\"\r\n                    : \"Pobierz przykładowe zadanie\"\r\n                } \r\n                </Button>\r\n        </StyledButtons>\r\n    );\r\n};\r\n\r\nexport default DownloadButton;","import styled, { css } from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    padding: 10px;\r\n\r\n    ${({ Wrapper }) => Wrapper && css`\r\n        @media(max-width:${({ theme }) => theme.breakpoint.mobileMax};) \r\n        {\r\n            grid-template-columns: 1fr;\r\n        }`\r\n    }\r\n`;","import React from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport Input from \"../../Input\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\nexport default () => {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    const query = (new URLSearchParams(location.search)).get(searchQueryParamName);\r\n\r\n    const onInputChange = ({ target }) => {\r\n        const searchParams = new URLSearchParams(location.search);\r\n\r\n        if (target.value.trim() === \"\") {\r\n            searchParams.delete(searchQueryParamName);\r\n        } else {\r\n            searchParams.set(searchQueryParamName, target.value);\r\n        }\r\n\r\n        history.push(`${location.pathname}?${searchParams.toString()}`);\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Input\r\n                placeholder=\"Filtruj zadania\"\r\n                value={query || \"\"}\r\n                onChange={onInputChange}\r\n                autoFocus\r\n            />\r\n        </Wrapper>\r\n    );\r\n};","import React from 'react';\r\nimport Form from \"./Form\";\r\nimport TaskList from \"./TaskList\";\r\nimport Buttons from \"./Buttons/index\";\r\nimport Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport StyledContainer from \"../../../common/Container\";\r\nimport DownloadButton from \"./DownloadButtons/DownloadButton\";\r\nimport Search from './Search';\r\n\r\nfunction TasksPage() {\r\n  return (\r\n    <StyledContainer>\r\n      <Header title=\"Lista zadań\" />\r\n      <Section\r\n        title=\"Dodaj nowe zadanie\"\r\n        body={< Form />}\r\n        extraHeaderContent={<DownloadButton />}\r\n      />\r\n      <Section\r\n        title=\"Wyszukiwarka\"\r\n        body={<Search />}\r\n      />\r\n      <Section\r\n        title=\"Lista zadań\"\r\n        body={< TaskList />}\r\n        extraHeaderContent={<Buttons />}\r\n      />\r\n    </StyledContainer>\r\n  );\r\n};\r\n\r\nexport default TasksPage;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledDescription = styled.section`\r\npadding: 20px;\r\n`;","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useParams } from 'react-router-dom';\r\nimport Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport StyledContainer from \"../../../common/Container\";\r\nimport { getTaskById } from \"../tasksSlice\";\r\nimport { StyledDescription } from \"../../author/styled\";\r\n\r\nfunction TaskPage() {\r\n    const { id } = useParams();\r\n    const task = useSelector(state => getTaskById(state, id));\r\n\r\n    return (\r\n        <StyledContainer>\r\n            <Header title=\"Szczegóły zadania\" />\r\n            <Section\r\n                title={task ? task.content : \"Nie znaleziono zadania\"}\r\n                body={!!task && (\r\n                    <StyledDescription>\r\n                        <strong>Ukończono: {\" \"}</strong> {task.done ? \"Tak\" : \"Nie\"}\r\n                    </StyledDescription>\r\n                )}\r\n            />\r\n        </StyledContainer>\r\n    );\r\n}\r\n\r\nexport default TaskPage;\r\n","import { NavLink } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const StyledList = styled.ul`\r\n    padding: 20px;\r\n    text-align: center;\r\n    background-color: ${({ theme }) => theme.color.teal};\r\n    margin: 0;\r\n`;\r\n\r\nconst activeClassName = \"active\";\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n    activeClassName,\r\n}))`\r\n    text-decoration: none;\r\n    color: ${({ theme }) => theme.color.white};\r\n    padding: 20px;\r\n    &:hover {\r\n        text-decoration: underline;\r\n    }\r\n&.${activeClassName} {\r\n    font-weight: bolder;\r\n    }\r\n`;","import React from \"react\";\r\nimport StyledContainer from \"../../common/Container\";\r\nimport Header from \"../../common/Header\";\r\nimport Section from \"../../common/Section\";\r\nimport { StyledDescription } from \"./styled\";\r\n\r\nexport default () => (\r\n    <StyledContainer>\r\n        <Header title=\"O autorze\" />\r\n        <Section\r\n            title=\"Ewelina Niewęgłowska\"\r\n            body={\r\n                <StyledDescription>\r\n                    <strong>Kocham aktywność fizyczną!</strong> Trenowałam piłkę ręczną, zrobiłam Koronę Polskich\r\n                    Półmaratonów, trenowałam siłowo,aktualnie kręce kilometry na rowerze i trenuje pole dance. W myśl: <em>Bój się i rób\r\n                    </em> zrobiłam prawo jazdy na motocykl i spędziłam 3 wyborne lata w trasie i na torach\r\n                    szkoleniowych. Jestem właścicielką 2 kotów wagi ciężkiej i <em>nie przez przypadek</em> jeden z nich ma na imię Odważnik.\r\n                </StyledDescription>\r\n            }>\r\n        </Section>\r\n    </ StyledContainer>\r\n);","import React from \"react\";\r\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport TasksPage from \"./features/tasks/TasksPage\";\r\nimport TaskPage from \"./features/tasks/TaskPage\";\r\nimport { StyledNavLink, StyledList } from \"./styled\";\r\nimport AuthorPage from \"./features/author/AuthorPage\";\r\n\r\nexport default () => (\r\n  <HashRouter>\r\n    <StyledList>\r\n      <StyledNavLink to=\"/zadania\">\r\n        Zadania\r\n      </StyledNavLink>\r\n      <StyledNavLink to=\"/autor\">\r\n        O autorze\r\n      </StyledNavLink>\r\n    </StyledList>\r\n    <Switch>\r\n      <Route path=\"/zadania/:id\">\r\n        <TaskPage />\r\n      </Route>\r\n      <Route path=\"/zadania\">\r\n        <TasksPage />\r\n      </Route>\r\n      <Route path=\"/autor\">\r\n        <AuthorPage />\r\n      </Route>\r\n      <Route path=\"/\">\r\n        <Redirect to=\"/zadania\" />\r\n      </Route>\r\n    </Switch>\r\n  </HashRouter>\r\n);","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/todo-list-react/exampleTasks.json\");\r\n\r\n    if(!response.ok) {\r\n        new Error(response.statusText);\r\n    }\r\n\r\n    return await response.json();\r\n};","import { call, delay, put, select, takeEvery, takeLatest } from \"redux-saga/effects\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { fetchExampleTasks, fetchExampleTasksError, fetchExampleTasksSucces, selectTasks, setTasks } from \"./tasksSlice\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield delay(1000);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(fetchExampleTasksSucces(exampleTasks));\r\n    } catch (error) {\r\n        yield put(fetchExampleTasksError());\r\n        yield call(alert, \"Coś poszło nie tak!\");\r\n    }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks)\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler)\r\n}","import { all } from \"redux-saga/effects\";\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        tasksSaga(),\r\n    ]);\r\n}","import { configureStore } from '@reduxjs/toolkit';\r\nimport createSagaMiddleware from '@redux-saga/core';\r\nimport rootSaga from './rootSaga';\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport { Provider } from \"react-redux\";\r\nimport { theme } from \"./theme\";\r\nimport { GlobalStyle } from \"./GlobalStyle\";\r\nimport App from \"./App\";\r\nimport store from \"./store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ThemeProvider theme={theme}>\r\n        <GlobalStyle />\r\n        <App />\r\n      </ThemeProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export const theme = {\r\n    color: {\r\n        teal: \"#008080\",\r\n        white: \"#FFFFFF\",\r\n        green: \"#2DBA26\",\r\n        red: \"#FF0000\",\r\n        grey: \"#CBCAB6\",\r\n        lightGrey: \"#E8EBE0\",\r\n        silver: \"#E8F2EB\",\r\n        iron: \"#D4D7D9\",\r\n\r\n    },\r\n    breakpoints: {\r\n        mobileMax: 767,\r\n    },\r\n};"],"sourceRoot":""}