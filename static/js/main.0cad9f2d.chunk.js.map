{"version":3,"sources":["reportWebVitals.js","GlobalStyle.js","features/tasks/tasksSlice.js","features/tasks/Form/styled.js","features/tasks/Form/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/index.js","useTasks.js","features/tasks/Tasks.js","App.js","store.js","index.js","theme.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","theme","color","iron","tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","payload","push","toggleHideDone","state","toggleTaskDone","action","index","findIndex","task","id","done","actions","selectTasks","console","log","reducer","content","StyledForm","styled","form","white","css","breakpoint","mobileMax","Input","input","lightGrey","Button","button","teal","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trim","nanoid","current","focus","ref","placeholder","value","autoFocus","onChange","target","List","ul","Item","li","hidden","Content","span","green","remove","red","TaskList","removeTask","useSelector","map","onClick","StyledButtons","div","grey","Buttons","setAllDone","length","disabled","every","StyledSection","section","silver","Header","header","Title","h2","Section","title","body","extraHeaderContent","StyledContainer","main","getInitialTasks","tasksFromStorage","localStorage","getItem","JSON","parse","Tasks","setTasks","useEffect","setItem","stringify","filter","addNewTask","useTasks","configureStore","tasksReducer","ReactDOM","render","StrictMode","store","breakpoints","App","document","getElementById"],"mappings":"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","file":"static/js/main.0cad9f2d.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\nhtml {\r\n    box-sizing: border-box;\r\n  }\r\n  \r\n  *, ::after, ::before {\r\n    box-sizing: inherit;\r\n  }\r\n  \r\n  body {\r\n    font-family: 'Montserrat', sans-serif;\r\n    background-color: ${({ theme }) => theme.color.iron};\r\n  }\r\n`;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: [],\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload }) => {\r\n            tasks.push(payload);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: (state, action) => {\r\n            const index = state.tasks.findIndex(task => task.id ===action.payload);\r\n            state.tasks[index].done = !state.tasks[index].done;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { addTask, toggleHideDone, toggleTaskDone } = tasksSlice.actions;\r\nexport const selectTasks = state => state.tasks;\r\nexport default tasksSlice.reducer;\r\n\r\nconsole.log(tasksSlice.reducer({ tasks: [] }, addTask({\r\n    content: \"Test\",\r\n    done: true,\r\n})));","import styled, { css } from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: flex;\r\n    background-color: ${({ theme }) => theme.color.white};\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 10px;\r\n\r\n    ${({ StyledForm }) => StyledForm && css`\r\n        @media(max-width:${({ theme }) => theme.breakpoint.mobileMax};) \r\n        {\r\n            grid-template-columns: 1fr;\r\n        }`\r\n    }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    flex-basis: 75%;\r\n    flex-grow: 1;\r\n    margin: 10px;\r\n    padding: 10px;\r\n    border: 1px solid ${({ theme }) => theme.color.lightGrey};\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    flex-grow: 1;\r\n    background-color: ${({ theme }) => theme.color.teal};\r\n    color: ${({ theme }) => theme.color.white};\r\n    padding: 10px;\r\n    margin: 10px;\r\n    border: none;\r\n    transition: 1s;\r\n    cursor: pointer;\r\n        &:hover{\r\n            background-color: hsl(180, 100%, 30%);\r\n            transform: scale(1.1);\r\n            transition: 1s;\r\n        }\r\n        &:active{\r\n            background-color: hsl(180, 100%, 35%);\r\n        }\r\n`;","import React, { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { addTask } from \"../tasksSlice\";\r\nimport { StyledForm, Input, Button } from \"./styled\";\r\n\r\nconst Form = () => {\r\n   const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n   const inputRef = useRef(null);\r\n\r\n   const dispatch = useDispatch();\r\n\r\n   const onFormSubmit = (event) => {\r\n      event.preventDefault();\r\n\r\n      if (newTaskContent.trim() === \"\") {\r\n         return;\r\n      };\r\n\r\n      dispatch(addTask({\r\n         content: newTaskContent,\r\n         done: false,\r\n         id: nanoid(),\r\n      }));\r\n\r\n      setNewTaskContent(\"\");\r\n      inputRef.current.focus();\r\n   };\r\n\r\n   return (\r\n      <StyledForm\r\n         onSubmit={onFormSubmit}>\r\n         <Input\r\n            ref={inputRef}\r\n            placeholder=\"Co jest do zrobienia?\"\r\n            value={newTaskContent}\r\n            autoFocus\r\n            onChange={({ target }) => setNewTaskContent(target.value)}\r\n         />\r\n         <Button >Dodaj zadanie</Button>\r\n      </StyledForm>\r\n   );\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    background-color: ${({ theme }) => theme.color.white};\r\n    padding: 10px;\r\n    margin: auto;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.lightGrey};\r\n    padding: 10px;\r\n    align-items: center;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        word-break: break-word;\r\n        flex-basis: 100%;\r\n        flex-wrap: wrap;\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    text-align: center;\r\n    width: 30px;\r\n    height: 30px;\r\n    margin: 0 10px;\r\n    border: none;\r\n    color: ${({ theme }) => theme.color.white};\r\n    font-size: 16px;\r\n    align-self: center;\r\n\r\n    ${({ done }) => done && css`\r\n        background-color: ${({ theme }) => theme.color.green};\r\n        cursor: pointer;\r\n        transition: 1s;\r\n        \r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.color.red};\r\n        cursor: pointer;\r\n        transition: 1s;\r\n\r\n        &:hover {\r\n            filter: brightness(120%);\r\n        }\r\n    `}\r\n`;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleTaskDone } from \"../tasksSlice\";\r\nimport { List, Item, Button, Content } from \"./styled\";\r\n\r\nconst TaskList = ({ removeTask }) => {\r\n  const { tasks, hideDone } = useSelector(selectTasks);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <List>\r\n      {tasks.map(task => (\r\n        <Item\r\n          key={task.id}\r\n          hidden={task.done && hideDone}\r\n        >\r\n          <Button\r\n            done\r\n            onClick={() => dispatch(toggleTaskDone(task.id))}\r\n          >\r\n            {task.done ? \"✔\" : \"\"}\r\n          </Button>\r\n          <Content done={task.done}>\r\n            {task.content}\r\n          </Content>\r\n          <Button\r\n            remove\r\n            onClick={() => removeTask(task.id)}\r\n          >\r\n            🗑\r\n          </Button>\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const StyledButtons = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    background-color: transparent;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background-color: transparent;\r\n    color: ${({ theme }) => theme.color.teal};\r\n    margin: 5px;\r\n    border: none;\r\n    font-size: 15px;\r\n    transition: 1s;\r\n    cursor: pointer;\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n        &:active {\r\n            filter: brightness(120%);\r\n        }\r\n        &:disabled {\r\n            color: ${({ theme }) => theme.color.grey};\r\n            cursor: default;\r\n        } \r\n`;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport { StyledButtons, Button } from \"./styled\";\r\nimport { selectTasks, toggleHideDone } from \"../tasksSlice\";\r\n\r\nconst Buttons = ({ setAllDone }) => {\r\n  const {tasks, hideDone} = useSelector(selectTasks);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <StyledButtons>\r\n      {tasks.length > 0 && (\r\n        <>\r\n          <Button\r\n            onClick={() => dispatch(toggleHideDone())}\r\n          >\r\n            {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n          </Button>\r\n          <Button\r\n            onClick={setAllDone}\r\n            disabled={tasks.every((task => task.done))}\r\n          >\r\n            Ukończ wszystkie\r\n          </Button>\r\n        </>\r\n      )}\r\n    </StyledButtons>\r\n  );\r\n}\r\n\r\n\r\nexport default Buttons;","import styled, { css } from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    margin: 10px 0;\r\n    background: ${({ theme }) => theme.color.white};\r\n    box-shadow: 0 0 5px  ${({ theme }) => theme.color.silver};\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.silver};\r\n    padding: 0 20px;\r\n    flex-wrap: wrap;\r\n\r\n    ${({ Header }) => Header && css`\r\n        @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}) {\r\n        flex-direction: column;\r\n  }`}\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    font-size: 20px;\r\n`;\r\n\r\n","import React from \"react\";\r\nimport { StyledSection, Header, Title } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <StyledSection>\r\n        <Header>\r\n            <Title> {title} </Title>\r\n            {extraHeaderContent}\r\n        </Header>\r\n        {body}\r\n    </StyledSection>\r\n);\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\n\r\nconst Header = ({ title }) => (\r\n    <h1>{title}</h1>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nconst StyledContainer = styled.main`\r\n    max-width: 800px;\r\n    margin: 20px auto;\r\n    padding: 0 20px;\r\n`;\r\n\r\nexport default StyledContainer;","import { useState, useEffect } from \"react\";\r\n\r\nconst getInitialTasks = () => {\r\n    const tasksFromStorage = localStorage.getItem(\"tasks\");\r\n\r\n    return tasksFromStorage\r\n            ? JSON.parse(tasksFromStorage)\r\n            : [];\r\n};\r\n\r\nexport const useTasks = () => {\r\n    const [tasks, setTasks] = useState(getInitialTasks);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n    }, [tasks]);\r\n\r\n    const removeTask = (id) => {\r\n        setTasks(tasks => tasks.filter(task => task.id !== id));\r\n    };\r\n\r\n    const toggleTaskDone = (id) => {\r\n        setTasks(tasks => tasks.map(task => {\r\n            if (task.id === id) {\r\n                return { ...task, done: !task.done };\r\n            }\r\n\r\n            return task;\r\n        }));\r\n    };\r\n\r\n    const setAllDone = () => {\r\n        setTasks(tasks => tasks.map(task => ({\r\n            ...task,\r\n            done: true,\r\n        })));\r\n    };\r\n\r\n    const addNewTask = (content) => {\r\n        setTasks(tasks => [\r\n            ...tasks,\r\n            {\r\n                content,\r\n                done: false,\r\n                id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\r\n            },\r\n        ]);\r\n    };\r\n    return {\r\n        tasks,\r\n        removeTask,\r\n        toggleTaskDone,\r\n        setAllDone,\r\n        addNewTask,\r\n    };\r\n};","import React from 'react';\r\nimport { useSelector } from \"react-redux\";\r\nimport Form from \"./Form\";\r\nimport TaskList from \"./TaskList\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"../../common/Section\";\r\nimport Header from \"../../common/Header\";\r\nimport StyledContainer from \"../../common/Container\";\r\nimport { useTasks } from \"../../useTasks\";\r\nimport { selectTasks } from './tasksSlice';\r\n\r\nfunction Tasks() {\r\n\r\n  const { tasks } = useSelector(selectTasks);\r\n\r\n  const {\r\n    // tasks,\r\n    removeTask,\r\n    toggleTaskDone,\r\n    setAllDone,\r\n    addNewTask,\r\n  } = useTasks();\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <Header title=\"Lista zadań\" />\r\n      <Section\r\n        title=\"Dodaj nowe zadanie\"\r\n        body={< Form addNewTask={addNewTask} />}\r\n      />\r\n      <Section\r\n        title=\"Lista zadań\"\r\n        body={\r\n          < TaskList\r\n            removeTask={removeTask}\r\n            toggleTaskDone={toggleTaskDone} />\r\n        }\r\n        extraHeaderContent={\r\n          <Buttons\r\n            setAllDone={setAllDone} />\r\n        }\r\n      />\r\n    </StyledContainer>\r\n  );\r\n}\r\n\r\nexport default Tasks;\r\n","import React from \"react\";\r\nimport Tasks from \"./features/tasks/Tasks\";\r\n\r\nexport default () => <Tasks />;","import { configureStore } from '@reduxjs/toolkit';\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport { Provider } from \"react-redux\";\r\nimport { theme } from \"./theme\";\r\nimport { GlobalStyle } from \"./GlobalStyle\";\r\nimport App from \"./App\";\r\nimport { addTask } from \"./features/tasks/tasksSlice\";\r\nimport store from \"./store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ThemeProvider theme={theme}>\r\n        <GlobalStyle />\r\n        <App />\r\n      </ThemeProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export const theme = {\r\n    color: {\r\n        teal: \"#008080\",\r\n        white: \"#FFFFFF\",\r\n        green: \"#2DBA26\",\r\n        red: \"#FF0000\",\r\n        grey: \"#CBCAB6\",\r\n        lightGrey: \"#E8EBE0\",\r\n        silver: \"#E8F2EB\",\r\n        iron: \"#D4D7D9\",\r\n\r\n    },\r\n    breakpoints: {\r\n        mobileMax: 767,\r\n    },\r\n};\r\n\r\n"],"sourceRoot":""}