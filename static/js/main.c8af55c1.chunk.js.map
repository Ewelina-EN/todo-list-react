{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Header/index.js","Container/index.js","App.js","reportWebVitals.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","trim","placeholder","value","autoFocus","onChange","target","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","done","onClick","id","content","Buttons","toggleHideDone","setAllDone","length","disabled","every","Section","title","body","extraHeaderContent","Header","Container","children","App","setHideDone","tasksFromStorage","localStorage","getItem","JSON","parse","setTasks","useEffect","setItem","stringify","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c8af55c1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n   const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n   const onFormSubmit = (event) => {\r\n      event.preventDefault();\r\n\r\n      if (newTaskContent.trim() === \"\") {\r\n         return;\r\n      };\r\n\r\n      addNewTask(newTaskContent);\r\n      setNewTaskContent(\"\");\r\n   };\r\n\r\n   return (\r\n      <form className=\"form\" onSubmit={onFormSubmit}>\r\n         <input\r\n            className=\"form__newTask\"\r\n            placeholder=\"Co jest do zrobienia?\"\r\n            value={newTaskContent}\r\n            autoFocus\r\n            onChange={({ target }) => setNewTaskContent(target.value)}\r\n         />\r\n         <button className=\"form__taskButton\">Dodaj zadanie</button>\r\n      </form>\r\n   );\r\n};\r\n\r\nexport default Form;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n  <ul className=\"list\">\r\n    {tasks.map(task => (\r\n      <li key={task.id}\r\n        className={`list__item ${task.done & hideDone\r\n          ? \" hide \"\r\n          : \"\"}`\r\n        }>\r\n        <button\r\n          className=\"list__button list__button--done \"\r\n          onClick={() => toggleTaskDone(task.id)}\r\n        >\r\n          {task.done ? \"âœ”\" : \"\"}\r\n        </button>\r\n        <span className={\r\n          `list__task${task.done ? \" list__task--done\" : \"\"}`\r\n        }>\r\n          {task.id} - {task.content}\r\n        </span>\r\n        <button\r\n          className=\"list__button list__button--remove \"\r\n          onClick={() => removeTask(task.id)}\r\n        >\r\n          ðŸ—‘\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nexport default Tasks;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\r\n\r\n  <div className=\"buttons\">\r\n    {tasks.length > 0 && (\r\n      <>\r\n        <button\r\n          onClick={toggleHideDone}\r\n          className=\"buttons__button\"\r\n        >\r\n          {hideDone ? \"PokaÅ¼\" : \"Ukryj\"} ukoÅ„czone\r\n        </button>\r\n        <button\r\n          onClick={setAllDone}\r\n          className=\"buttons__button\"\r\n          disabled={tasks.every((task => task.done))}\r\n        >\r\n          UkoÅ„cz wszystkie\r\n        </button>\r\n      </>\r\n    )}\r\n  </div>\r\n);\r\n\r\n\r\nexport default Buttons;","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <section className=\"section\">\r\n        <header className=\"section__subHeader\">\r\n            <h2 className=\"section__title\"> {title} </h2>\r\n            {extraHeaderContent}\r\n        </header>\r\n        {body}\r\n    </section>\r\n);\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\n\r\nconst Header = ({ title }) => (\r\n    <h1>{title}</h1>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Container = ({ children }) => (\r\n    <main className=\"container\">\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Container;","import React, { useEffect, useState } from 'react';\r\nimport Form from \"./Form\";\r\nimport Tasks from \"./Tasks\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"./Section\";\r\nimport Header from \"./Header\";\r\nimport Container from \"./Container\";\r\n\r\n\r\nfunction App() {\r\n\r\n  const [hideDone, setHideDone] = useState(false);\r\n\r\n  const tasksFromStorage = localStorage.getItem(\"tasks\");\r\n\r\n  const [tasks, setTasks] = useState(\r\n    tasksFromStorage\r\n      ? JSON.parse(tasksFromStorage)\r\n      : []\r\n  );\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n  }, [tasks]);\r\n\r\n  const toggleHideDone = () => {\r\n    setHideDone(hideDone => !hideDone);\r\n  };\r\n\r\n  const removeTask = (id) => {\r\n    setTasks(tasks => tasks.filter(task => task.id !== id));\r\n  };\r\n\r\n  const toggleTaskDone = (id) => {\r\n    setTasks(tasks => tasks.map(task => {\r\n      if (task.id === id) {\r\n        return { ...task, done: !task.done };\r\n      }\r\n\r\n      return task;\r\n    }));\r\n  };\r\n\r\n  const setAllDone = () => {\r\n    setTasks(tasks => tasks.map(task => ({\r\n      ...task,\r\n      done: true,\r\n    })));\r\n  };\r\n\r\n  const addNewTask = (content) => {\r\n    setTasks(tasks => [\r\n      ...tasks,\r\n      {\r\n        content,\r\n        done: false,\r\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\r\n      },\r\n    ]);\r\n  };\r\n\r\n\r\n  return (\r\n    <Container>\r\n      <Header title=\"Lista zadaÅ„\" />\r\n      <Section\r\n        title=\"Dodaj nowe zadanie\"\r\n        body={< Form addNewTask={addNewTask} />}\r\n      />\r\n      <Section\r\n        title=\"Lista zadaÅ„\"\r\n        body={\r\n          < Tasks\r\n            tasks={tasks}\r\n            hideDone={hideDone}\r\n            removeTask={removeTask}\r\n            toggleTaskDone={toggleTaskDone} />\r\n        }\r\n        extraHeaderContent={\r\n          <Buttons\r\n            tasks={tasks}\r\n            hideDone={hideDone}\r\n            toggleHideDone={toggleHideDone}\r\n            setAllDone={setAllDone} />\r\n        }\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}